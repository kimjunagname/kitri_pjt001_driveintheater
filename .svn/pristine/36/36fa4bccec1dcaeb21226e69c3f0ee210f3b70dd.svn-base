package com.kitri.project.chart.service;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import com.kitri.project.chart.dto.PayChartDto;
import com.kitri.project.sql.CarSql;

public class PayChartDao {
	Connection con = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	CarSql myCon = null;

	public PayChartDao() {
		myCon = new CarSql();
	}

	//TODO selectChartByYear 지점의 year년 총매출, 총현금결제금액, 총마일리지결제금액
	public PayChartDto selectChartByYear(int branch_no, String year){
		PayChartDto dto = null;
		try {
			con = myCon.connect();
			String sql = "select sum(ticket_paytotal) ticket_paytotal, sum(ticket_paycash) ticket_paycash, sum(ticket_paymileage) ticket_paymileage";
				 sql += "from TICKET_PAY";
				 sql += "where branch_no = ?";
				 sql += "and ticket_paydate";
				 sql += "between to_date(?, 'yyyymmdd') and last_day(to_date(?, 'yyyymmdd'))";

 /*				 String sql = "select branch_no, ticket_paytotal, ticket_paycash, ticket_paymileage";
				 sql += "from TICKET_PAY where branch_no = ?";
				 sql += "and ticket_paydate";
				 sql += "between to_date(?, 'yyyymmdd') and last_day(to_date(?, 'yyyymmdd'))";
*/
		 	pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, branch_no);
			pstmt.setString(2, year+"0101");
			pstmt.setString(3, year+"1201");
			rs = pstmt.executeQuery();
			if (rs.next()) {
				dto.setBranch_no(rs.getInt("branch_no"));
				dto.setTicket_paytotal(rs.getLong("ticket_paytotal"));
				dto.setTicket_paycash(rs.getLong("ticket_paycash"));
				dto.setTicket_paymileage(rs.getLong("ticket_paymileage"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			myCon.close(rs, pstmt, con);
			return dto;
		}
	}

//	TODO selectCharByLast3Years 지점의 최근 3년간 매출
	public List<PayChartDto> selectCharByLast3Years(int branch_no, String year) {
		List<PayChartDto> list = null;
		try {
			list = new ArrayList<>();
			con = myCon.connect();
			String sql = "select branch_no, ticket_paytotal, ticket_paycash, ticket_paymileage";
				 sql += "from TICKET_PAY where branch_no = ?";
				 sql += "and ticket_paydate";
				 sql += "between to_date(?, 'yyyymmdd') and last_day(to_date(?, 'yyyymmdd'))";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, branch_no);
			pstmt.setString(2, year+"0101");
			pstmt.setString(3, year+"1201");
			rs = pstmt.executeQuery();
			while(rs.next()) {
				PayChartDto dto = new PayChartDto();
				dto.setBranch_no(rs.getInt("branch_no"));
				dto.setTicket_paytotal(rs.getLong("ticket_paytotal"));
				dto.setTicket_paycash(rs.getLong("ticket_paycash"));
				dto.setTicket_paymileage(rs.getLong("ticket_paymileage"));
				list.add(dto);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			myCon.close(rs, pstmt, con);
			return list;
		}
	}

//	TODO selectChartByYearAllBranchs 최고관리자용 year년 각 지점별 총매출, 총현금결제금액, 총마일리지결제금액
	public List<PayChartDto> selectChartByYearAllBranchs(String year) {
		List<PayChartDto> list = null;
		try {
			list = new ArrayList<>();
			con = myCon.connect();
			String sql = "select branch_no, sum(ticket_paytotal) ticket_paytotal, sum(ticket_paycash) ticket_paycash, sum(ticket_paymileage) ticket_paymileage";
				 sql += "from TICKET_PAY";
				 sql += "where ticket_paydate";
				 sql += "between to_date(?, 'yyyymmdd') and last_day(to_date(?, 'yyyymmdd'))";
				 sql += "group by branch_no";
				 sql += "order by branch_no asc";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, year+"0101");
			pstmt.setString(2, year+"1201");
			rs = pstmt.executeQuery();
			while(rs.next()) {
				PayChartDto dto = new PayChartDto();
				dto.setBranch_no(rs.getInt("branch_no"));
				dto.setTicket_paytotal(rs.getLong("ticket_paytotal"));
				dto.setTicket_paycash(rs.getLong("ticket_paycash"));
				dto.setTicket_paymileage(rs.getLong("ticket_paymileage"));
				list.add(dto);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			myCon.close(rs, pstmt, con);
			return list;
		}
	}


	//TODO selectByPeriod 기간별 영화 매출 통계
//	List<PayChartDto> selectByPeriod(String date)
	
	
}
