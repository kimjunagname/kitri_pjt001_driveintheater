ALTER TABLE USER_INFO
  DROP
    PRIMARY KEY
    CASCADE
    KEEP INDEX;

ALTER TABLE EMP_INFO
  DROP
    PRIMARY KEY
    CASCADE
    KEEP INDEX;

ALTER TABLE TICKET_PAY
  DROP
    PRIMARY KEY
    CASCADE
    KEEP INDEX;


ALTER TABLE CAR_MANAGE
  DROP
    PRIMARY KEY
    CASCADE
    KEEP INDEX;

ALTER TABLE MOVIE_INFO
  DROP
    PRIMARY KEY
    CASCADE
    KEEP INDEX;

ALTER TABLE EMP_TIMEMANAGE
  DROP
    PRIMARY KEY
    CASCADE
    KEEP INDEX;

ALTER TABLE USER_MILEAGE
  DROP
    PRIMARY KEY
    CASCADE
    KEEP INDEX;

ALTER TABLE BRANCH_MOVIE
  DROP
    PRIMARY KEY
    CASCADE
    KEEP INDEX;

ALTER TABLE BRANCH
  DROP
    PRIMARY KEY
    CASCADE
    KEEP INDEX;

ALTER TABLE JOB
  DROP
    PRIMARY KEY
    CASCADE
    KEEP INDEX;

/* 사용자회원정보 */
DROP TABLE USER_INFO 
  CASCADE CONSTRAINTS;

DROP SEQUENCE USER_NO_SEQ;
  
/* 직원정보 */
DROP TABLE EMP_INFO
  CASCADE CONSTRAINTS;
  
DROP SEQUENCE EMP_NO_SEQ;
  
/* 영화결제 */
DROP TABLE TICKET_PAY 
  CASCADE CONSTRAINTS;


/* 회원등급관리 */
DROP TABLE GRADE_MANAGE 
  CASCADE CONSTRAINTS;

/* 차량관리 */
DROP TABLE CAR_MANAGE 
  CASCADE CONSTRAINTS;

/* 영화정보 */
DROP TABLE MOVIE_INFO 
  CASCADE CONSTRAINTS;

/* 직원근태 */
DROP TABLE EMP_TIMEMANAGE 
  CASCADE CONSTRAINTS;

/* 마일리지 */
DROP TABLE USER_MILEAGE 
  CASCADE CONSTRAINTS;

/* 지점별 상영관리 */
DROP TABLE BRANCH_MOVIE 
  CASCADE CONSTRAINTS;

/* 지점 */
DROP TABLE BRANCH 
  CASCADE CONSTRAINTS;

/* 직책 */
DROP TABLE JOB 
  CASCADE CONSTRAINTS;

 select * from USER_INFO;
  
/* 사용자회원정보 */
CREATE TABLE USER_INFO (
  USER_NO NUMBER(10) NOT NULL, /* 회원번호 */
  USER_ID VARCHAR2(30) NOT NULL, /* 아이디 */
  USER_PWD VARCHAR2(30) NOT NULL, /* 암호 */
  CARTYPE_NO VARCHAR2(30) NOT NULL, /* 차종명 */
  USER_NAME VARCHAR2(30), /* 이름 */
  USER_EMAIL VARCHAR2(30), /* 이메일 */
  USER_PHONE VARCHAR2(30) /* 핸드폰 */
);

COMMENT ON TABLE USER_INFO IS '사용자회원정보';
COMMENT ON COLUMN USER_INFO.USER_NO IS '회원번호';
COMMENT ON COLUMN USER_INFO.USER_ID IS '아이디';
COMMENT ON COLUMN USER_INFO.USER_PWD IS '암호';
COMMENT ON COLUMN USER_INFO.CARTYPE_NAME IS '차종명';
COMMENT ON COLUMN USER_INFO.USER_NAME IS '이름';
COMMENT ON COLUMN USER_INFO.USER_EMAIL IS '이메일';
COMMENT ON COLUMN USER_INFO.USER_PHONE IS '핸드폰';

/*사용자회원정보 시퀀스*/
  CREATE SEQUENCE USER_NO_SEQ 
  INCREMENT BY 1
  START WITH 1;

ALTER TABLE USER_INFO
  ADD
    CONSTRAINT PK_USER_INFO
    PRIMARY KEY (
      USER_NO
    );

INSERT into USER_INFO (USER_NO, USER_ID, USER_PWD, CARTYPE_NAME,USER_NAME,USER_EMAIL,  USER_PHONE)
               VALUES (USER_NO_SEQ.nextval, 'many', '1234', '소형차', '김정남', 'many@ma.com', '01093384137');

INSERT into USER_INFO (USER_NO, USER_ID, USER_PWD, CARTYPE_NAME,USER_NAME,USER_EMAIL,  USER_PHONE)
               VALUES (USER_NO_SEQ.nextval, 'ma1', '1234', '중형차', '이상규', 'ma1@ma.com', '01093384137');

INSERT into USER_INFO (USER_NO, USER_ID, USER_PWD, CARTYPE_NAME,USER_NAME,USER_EMAIL,  USER_PHONE)
               VALUES (USER_NO_SEQ.nextval, 'ma2', '11234', '대형차', '민규', 'ma2@ma.com', '01093384137');
commit;

 
select * from USER_INFO;   
    
/* 직원정보 */
CREATE TABLE EMP_INFO (
  EMP_NO NUMBER(10) NOT NULL, /* 사원번호 */
  EMP_ID VARCHAR2(30), /* 아이디 */
  EMP_PWD VARCHAR2(30), /* 암호 */
  EMP_NAME VARCHAR2(30), /* 이름 */
  EMP_BIRTH DATE, /* 생일 */
  EMP_EMAIL VARCHAR2(30), /* 이메일 */
  EMP_PHONE VARCHAR2(30), /* 핸드폰 */
  JOB_NO NUMBER(10), /* 직책번호 */
  BRANCH_NO NUMBER(10) /* 지점번호 */
);

COMMENT ON TABLE EMP_INFO IS '직원정보';
COMMENT ON COLUMN EMP_INFO.EMP_NO IS '사원번호';
COMMENT ON COLUMN EMP_INFO.EMP_ID IS '아이디';
COMMENT ON COLUMN EMP_INFO.EMP_PWD IS '암호';
COMMENT ON COLUMN EMP_INFO.EMP_NAME IS '이름';
COMMENT ON COLUMN EMP_INFO.EMP_BIRTH IS '생일';
COMMENT ON COLUMN EMP_INFO.EMP_EMAIL IS '이메일';
COMMENT ON COLUMN EMP_INFO.EMP_PHONE IS '핸드폰';
COMMENT ON COLUMN EMP_INFO.JOB_NO IS '직책번호';
COMMENT ON COLUMN EMP_INFO.BRANCH_NO IS '지점번호';

/*시퀀스 - EMP_INFO*/
CREATE SEQUENCE EMP_NO_SEQ 
  INCREMENT BY 1
  START WITH 1;

ALTER TABLE EMP_INFO
  ADD
    CONSTRAINT PK_EMP_INFO
    PRIMARY KEY (
      EMP_NO
    );

INSERT into EMP_INFO (EMP_NO,         EMP_ID, EMP_PWD, EMP_NAME,EMP_BIRTH, EMP_EMAIL,    EMP_PHONE,   JOB_NO, BRANCH_NO)
               VALUES (EMP_NO_SEQ .nextval, 'many', '1234', '김정남', sysdate, 'many@ma.com', '01093384137',      1,         1);
               
INSERT into EMP_INFO (EMP_NO,         EMP_ID, EMP_PWD, EMP_NAME,EMP_BIRTH, EMP_EMAIL, EMP_PHONE, JOB_NO, BRANCH_NO)
               VALUES (EMP_NO_SEQ .nextval, 'ma1', '1234', '이상규', sysdate, 'ma1@ma.com', '01093384137', 2, 1);
               
INSERT into EMP_INFO (EMP_NO,         EMP_ID, EMP_PWD, EMP_NAME,EMP_BIRTH, EMP_EMAIL, EMP_PHONE, JOB_NO, BRANCH_NO)
               VALUES (EMP_NO_SEQ .nextval, 'ma2', '1234', '민규', sysdate, 'ma2@ma.com', '01093384137', 3, 1);
               

INSERT into EMP_INFO (EMP_NO,         EMP_ID, EMP_PWD, EMP_NAME,EMP_BIRTH, EMP_EMAIL, EMP_PHONE, JOB_NO, BRANCH_NO)
               VALUES (EMP_NO_SEQ .nextval, 'ma3', '1234', '안효인', sysdate, 'ma3@ma.com', '01093384137', 1, 2);
               
INSERT into EMP_INFO (EMP_NO,         EMP_ID, EMP_PWD, EMP_NAME,EMP_BIRTH, EMP_EMAIL, EMP_PHONE, JOB_NO, BRANCH_NO)
               VALUES (EMP_NO_SEQ .nextval, 'ma4', '1234', '송민범', sysdate, 'ma4@ma.com', '01093384137', 2, 2);
               
INSERT into EMP_INFO (EMP_NO,         EMP_ID, EMP_PWD, EMP_NAME,EMP_BIRTH, EMP_EMAIL, EMP_PHONE, JOB_NO, BRANCH_NO)
               VALUES (EMP_NO_SEQ .nextval, 'ma5', '1234', '집에', sysdate, 'ma5@ma.com', '01093384137', 3, 2);

commit;

SELECT * FROM EMP_INFO;

/* 영화결제 TABLE 생성*/
CREATE TABLE TICKET_PAY (
  TICKET_PAYNO NUMBER(10) NOT NULL, /* 결제번호 */
  USER_NO NUMBER(10) NOT NULL, /* 회원번호 */
  BRANCH_NO NUMBER(10), /* 지점번호 */
  MOVIE_NO NUMBER(10), /* 영화번호 */
  TICKET_PAYTOTAL NUMBER(10), /* 총결제금액 */
  TICKET_PAYCASH NUMBER(10), /* 현금결제금액 */
  TICKET_PAYMILEAGE NUMBER(10), /* 마일리지결제금액 */
  TICKET_SALCOUNT NUMBER(10), /* 예매수량 */
  TICKET_PAYDATE DATE, /* 결제일자 */
  MOVIE_PALYDATE DATE /* 상영일 */
);

COMMENT ON TABLE TICKET_PAY IS '영화결제';
COMMENT ON COLUMN TICKET_PAY.TICKET_PAYNO IS '결제번호';
COMMENT ON COLUMN TICKET_PAY.USER_NO IS '회원번호';
COMMENT ON COLUMN TICKET_PAY.BRANCH_NO IS '지점번호';
COMMENT ON COLUMN TICKET_PAY.MOVIE_NO IS '영화번호';
COMMENT ON COLUMN TICKET_PAY.TICKET_PAYTOTAL IS '총결제금액';
COMMENT ON COLUMN TICKET_PAY.TICKET_PAYCASH IS '현금결제금액';
COMMENT ON COLUMN TICKET_PAY.TICKET_PAYMILEAGE IS '마일리지결제금액';
COMMENT ON COLUMN TICKET_PAY.TICKET_SALCOUNT IS '예매수량';
COMMENT ON COLUMN TICKET_PAY.TICKET_PAYDATE IS '결제일자';
COMMENT ON COLUMN TICKET_PAY.MOVIE_PALYDATE IS '상영일';

ALTER TABLE TICKET_PAY
  ADD
    CONSTRAINT PK_TICKET_PAY
    PRIMARY KEY (
      TICKET_PAYNO,
      USER_NO
    );
    
/* 결제번호 시퀀스 생성 */
CREATE SEQUENCE PAY_NO_SEQ
INCREMENT BY 1
START WITH 1

COMMENT ON TABLE TICKET_PAY IS '영화결제';
COMMENT ON COLUMN TICKET_PAY.TICKET_PAYNO IS '결제번호';
COMMENT ON COLUMN TICKET_PAY.USER_NO IS '회원번호';
COMMENT ON COLUMN TICKET_PAY.BRANCH_NO IS '지점번호';
COMMENT ON COLUMN TICKET_PAY.MOVIE_NO IS '영화번호';
COMMENT ON COLUMN TICKET_PAY.TICKET_PAYTOTAL IS '총결제금액';
COMMENT ON COLUMN TICKET_PAY.TICKET_PAYCASH IS '현금결제금액';
COMMENT ON COLUMN TICKET_PAY.TICKET_PAYMILEAGE IS '마일리지결제금액';
COMMENT ON COLUMN TICKET_PAY.TICKET_SALCOUNT IS '예매수량';
COMMENT ON COLUMN TICKET_PAY.TICKET_PAYDATE IS '결제일자';
COMMENT ON COLUMN TICKET_PAY.MOVIE_PALYDATE IS '상영일';

/*결제 테이블 값 대입*/
INSERT into TICKET_PAY(TICKET_PAYNO,USER_NO,BRANCH_NO,MOVIE_NO,TICKET_PAYTOTAL,TICKET_PAYCASH,TICKET_PAYMILEAGE,TICKET_SALCOUNT,TICKET_PAYDATE,MOVIE_PALYDATE)
VALUES (PAY_NO_SEQ.nextval, 1, 1, 1, 5000, 3000, 2000, 1, sysdate,TO_DATE('2018/05/15 15:09:05','yyyy/mm.dd hh24:mi:ss'));
INSERT into TICKET_PAY(TICKET_PAYNO,USER_NO,BRANCH_NO,MOVIE_NO,TICKET_PAYTOTAL,TICKET_PAYCASH,TICKET_PAYMILEAGE,TICKET_SALCOUNT,TICKET_PAYDATE,MOVIE_PALYDATE)
VALUES (PAY_NO_SEQ.nextval, 1, 1, 1, 5000, 3000, 2000, 1, sysdate,TO_DATE('2018/05/18 15:09:05','yyyy/mm.dd hh24:mi:ss'));

commit;














/* 회원등급관리 */
DROP TABLE GRADE_MANAGE 
  CASCADE CONSTRAINTS;


/* 회원등급관리 */
CREATE TABLE GRADE_MANAGE (
  GRADE_LOCOUNT NUMBER(10), /* 등급별관람기준 */
  GRADE_HICOUNT NUMBER(10), /* 등급별관람기준 */
  GRADE_NAME2 VARCHAR2(30), /* 등급이름 */
  GRADE_PCT NUMBER(10,2) /* 적립률 */
);

COMMENT ON TABLE GRADE_MANAGE IS '회원등급관리';
COMMENT ON COLUMN GRADE_MANAGE.GRADE_LOCOUNT IS '낮은등급별관람기준';
COMMENT ON COLUMN GRADE_MANAGE.GRADE_HICOUNT IS '최고등급별관람기준';
COMMENT ON COLUMN GRADE_MANAGE.GRADE_NAME2 IS '등급이름';
COMMENT ON COLUMN GRADE_MANAGE.GRADE_PCT IS '적립률';

select * from GRADE_MANAGE;

INSERT INTO GRADE_MANAGE values (1, 4, '일반', 0.01);
INSERT INTO GRADE_MANAGE values (5, 9, '실버', 0.05);
INSERT INTO GRADE_MANAGE values (10, 100, '골드',0.1);

SELECT USER_INFO.USER_ID, GRADE_MANAGE.GRADE_NAME2
FROM USER_INFO.USER_ID


select USER_INFO.USER_ID, GRADE_MANAGE.GRADE_NAME2
from USER_INFO, USER_MILEAGE, GRADE_MANAGE
where USER_INFO.USER_NO = USER_MILEAGE.USER_NO
AND USER_MILEAGE.USER_RSVCOUNT  between GRADE_MANAGE.GRADE_LOCOUNT and GRADE_MANAGE.GRADE_HICOUNT
AND USER_INFO.USER_ID = 'many';
/*id 대소문자 구분 함*/





/* 차량관리 테이블 생성*/
CREATE TABLE CAR_MANAGE (
  CARTYPE_NO NUMBER(10) NOT NULL, /* 차종번호 */
  CARTYPE_NAME VARCHAR2(30), /* 차종명 */
  CARTYPE_PRICE NUMBER(10) /* 책정금액 */
);

COMMENT ON TABLE CAR_MANAGE IS '차량관리';
COMMENT ON COLUMN CAR_MANAGE.CARTYPE_NO IS '차종번호';
COMMENT ON COLUMN CAR_MANAGE.CARTYPE_NAME IS '차종명';
COMMENT ON COLUMN CAR_MANAGE.CARTYPE_PRICE IS '책정금액';

ALTER TABLE CAR_MANAGE
  ADD
    CONSTRAINT PK_CAR_MANAGE
    PRIMARY KEY (
      CARTYPE_NO
    );
    
    
/* 차량관리 데이터 생성*/
INSERT INTO car_manage values(1, '소형차', 3000);
INSERT INTO car_manage values(2, '중형차', 5000);
INSERT INTO car_manage values(3, '대형차', 7000);

SELECT * FROM CAR_MANAGE;

/*영화 정보*/
CREATE TABLE MOVIE_INFO (
  MOVIE_NO NUMBER(10) NOT NULL, /* 영화번호 */
  MOVIE_TITLE VARCHAR2(30), /* 영화제목 */
  MOVIE_POSTER VARCHAR2(50), /* 영화포스터 */
  MOVIE_GENRE VARCHAR2(30), /* 장르 */
  MOVIE_STORY VARCHAR2(30), /* 줄거리 */
  MOVIE_ACTOR VARCHAR2(30), /* 출연진 */
  MOVIE_RUNNINGTIME NUMBER(30) /* 런타임 */
);

COMMENT ON TABLE MOVIE_INFO IS '영화정보';
COMMENT ON COLUMN MOVIE_INFO.MOVIE_NO IS '영화번호';
COMMENT ON COLUMN MOVIE_INFO.MOVIE_TITLE IS '영화제목';
COMMENT ON COLUMN MOVIE_INFO.MOVIE_POSTER IS '영화포스터';
COMMENT ON COLUMN MOVIE_INFO.MOVIE_GENRE IS '장르';
COMMENT ON COLUMN MOVIE_INFO.MOVIE_STORY IS '줄거리';
COMMENT ON COLUMN MOVIE_INFO.MOVIE_ACTOR IS '출연진';
COMMENT ON COLUMN MOVIE_INFO.MOVIE_RUNNINGTIME IS '런타임';

ALTER TABLE MOVIE_INFO
  ADD
    CONSTRAINT PK_MOVIE_INFO
    PRIMARY KEY (
      MOVIE_NO
    );
/* 영화번호 시퀀스 생성*/
CREATE SEQUENCE MOVIE_NO_SEQ 
  INCREMENT BY 1
  START WITH 1;
  
/* 영화테이블 데이터 입력 */
INSERT INTO MOVIE_INFO (MOVIE_INFO.MOVIE_NO, MOVIE_INFO.MOVIE_TITLE, MOVIE_INFO.MOVIE_POSTER, MOVIE_INFO.MOVIE_GENRE, MOVIE_INFO.MOVIE_STORY, MOVIE_INFO.MOVIE_ACTOR, MOVIE_INFO.MOVIE_RUNNINGTIME)
VALUES (MOVIE_NO_SEQ.NEXTVAL,'바람과 함께 사라지다','POSTER1.JPG','멜로','바람과 함께 사라져','김00 이00',120);

INSERT INTO MOVIE_INFO (MOVIE_INFO.MOVIE_NO, MOVIE_INFO.MOVIE_TITLE, MOVIE_INFO.MOVIE_POSTER, MOVIE_INFO.MOVIE_GENRE, MOVIE_INFO.MOVIE_STORY, MOVIE_INFO.MOVIE_ACTOR, MOVIE_INFO.MOVIE_RUNNINGTIME)
VALUES (MOVIE_NO_SEQ.NEXTVAL,'카톡 읽씹','POSTER2.JPG','코믹','카톡에 1이 안없어짐','김00 이00',120);

INSERT INTO MOVIE_INFO (MOVIE_INFO.MOVIE_NO, MOVIE_INFO.MOVIE_TITLE, MOVIE_INFO.MOVIE_POSTER, MOVIE_INFO.MOVIE_GENRE, MOVIE_INFO.MOVIE_STORY, MOVIE_INFO.MOVIE_ACTOR, MOVIE_INFO.MOVIE_RUNNINGTIME)
VALUES (MOVIE_NO_SEQ.NEXTVAL,'사라진조원들','POSTER3.JPG','스킬러','카톡 읽씹','최00 김00',120);

select * from MOVIE_INFO;

/* 직업 근태관리 테이블 생성*/
CREATE TABLE EMP_TIMEMANAGE (
  TIMEMNG_NO NUMBER(10), /* 근태관리번호 */
  EMP_NO NUMBER(10) NOT NULL, /* 사원번호 */
  EMP_INTIME DATE, /* 출근시간 */
  EMP_OUTTIME DATE /* 퇴근시간 */
);

COMMENT ON TABLE EMP_TIMEMANAGE IS '직원근태';
COMMENT ON COLUMN EMP_TIMEMANAGE.TIMEMNG_NO IS '근태관리번호';
COMMENT ON COLUMN EMP_TIMEMANAGE.EMP_NO IS '사원번호';
COMMENT ON COLUMN EMP_TIMEMANAGE.EMP_INTIME IS '출근시간';
COMMENT ON COLUMN EMP_TIMEMANAGE.EMP_OUTTIME IS '퇴근시간';

ALTER TABLE EMP_TIMEMANAGE
  ADD
    CONSTRAINT PK_EMP_TIMEMANAGE
    PRIMARY KEY (
      EMP_NO
    );

/* 직업 근태관리 테이블 데이터 생성*/
CREATE TABLE EMP_TIMEMANAGE (
  TIMEMNG_NO NUMBER(10), /* 근태관리번호 */
  EMP_NO NUMBER(10) NOT NULL, /* 사원번호 */
  EMP_INTIME DATE, /* 출근시간 */
  EMP_OUTTIME DATE /* 퇴근시간 */
);

COMMENT ON TABLE EMP_TIMEMANAGE IS '직원근태';
COMMENT ON COLUMN EMP_TIMEMANAGE.TIMEMNG_NO IS '근태관리번호';
COMMENT ON COLUMN EMP_TIMEMANAGE.EMP_NO IS '사원번호';
COMMENT ON COLUMN EMP_TIMEMANAGE.EMP_INTIME IS '출근시간';
COMMENT ON COLUMN EMP_TIMEMANAGE.EMP_OUTTIME IS '퇴근시간';

ALTER TABLE EMP_TIMEMANAGE
  ADD
    CONSTRAINT PK_EMP_TIMEMANAGE
    PRIMARY KEY (
      EMP_NO
    );
/* 근태관리번호 SEQ 생성*/ 
CREATE SEQUENCE TIMENG_NO_SEQ 
  INCREMENT BY 1
  START WITH 1;

/* 근태관리 데이터 생성*/
Insert into emp_timemanage (EMP_TIMEMANAGE.TIMEMNG_NO, EMP_TIMEMANAGE.EMP_NO, EMP_TIMEMANAGE.EMP_INTIME, EMP_TIMEMANAGE.EMP_OUTTIME) 
values (TIMENG_NO_SEQ.NEXTVAL, 1, sysdate,sysdate);
Insert into emp_timemanage (EMP_TIMEMANAGE.TIMEMNG_NO, EMP_TIMEMANAGE.EMP_NO, EMP_TIMEMANAGE.EMP_INTIME, EMP_TIMEMANAGE.EMP_OUTTIME) 
values (TIMENG_NO_SEQ.NEXTVAL, 2, sysdate,sysdate);
Insert into emp_timemanage (EMP_TIMEMANAGE.TIMEMNG_NO, EMP_TIMEMANAGE.EMP_NO, EMP_TIMEMANAGE.EMP_INTIME, EMP_TIMEMANAGE.EMP_OUTTIME) 
values (TIMENG_NO_SEQ.NEXTVAL, 3, sysdate,sysdate);

/* 근태관리 데이터 생성*/
Insert into emp_timemanage values (TIMENG_NO_SEQ.NEXTVAL,1,sysdate,sysdate);
Insert into emp_timemanage values (TIMENG_NO_SEQ.NEXTVAL,2,sysdate,sysdate);

/* 마일리지 테이블 생성*/
CREATE TABLE USER_MILEAGE (
  USER_NO NUMBER(10) NOT NULL, /* 회원번호 */
  USER_MILEAGE NUMBER(10), /* 마일리지 */
  USER_RSVCOUNT NUMBER(10) /* 예매횟수 */
);

COMMENT ON TABLE USER_MILEAGE IS '마일리지';
COMMENT ON COLUMN USER_MILEAGE.USER_NO IS '회원번호';
COMMENT ON COLUMN USER_MILEAGE.USER_MILEAGE IS '마일리지';
COMMENT ON COLUMN USER_MILEAGE.USER_RSVCOUNT IS '예매횟수';

ALTER TABLE USER_MILEAGE
  ADD
    CONSTRAINT PK_USER_MILEAGE
    PRIMARY KEY (
      USER_NO
    );
    
INSERT INTO USER_MILEAGE VALUES(44,3000,5);
INSERT INTO USER_MILEAGE VALUES(45,5000,10);
INSERT INTO USER_MILEAGE VALUES(46,4000,7);

/* 지점별 상영관리 테이블 생성 */
CREATE TABLE BRANCH_MOVIE (
  MOVIE_NO NUMBER(10) NOT NULL, /* 영화번호 */
  BRANCH_NO NUMBER(10), /* 지점번호 */
  MOVIE_STARTDATE DATE, /* 상영시작일 */
  MOVIE_ENDDATE DATE, /* 상영종료일 */
  MOVIE_COUNT NUMBER(10), /* 상영횟수 */
  MOVIE_START1 VARCHAR2(30), /* 시작시간1 */
  MOVIE_START2 VARCHAR2(30), /* 시작시간2 */
  MOVIE_START3 VARCHAR2(30) /* 시작시간3 */
);

COMMENT ON TABLE BRANCH_MOVIE IS '지점별 상영관리';
COMMENT ON COLUMN BRANCH_MOVIE.MOVIE_NO IS '영화번호';
COMMENT ON COLUMN BRANCH_MOVIE.BRANCH_NO IS '지점번호';
COMMENT ON COLUMN BRANCH_MOVIE.MOVIE_STARTDATE IS '상영시작일';
COMMENT ON COLUMN BRANCH_MOVIE.MOVIE_ENDDATE IS '상영종료일';
COMMENT ON COLUMN BRANCH_MOVIE.MOVIE_COUNT IS '상영횟수';
COMMENT ON COLUMN BRANCH_MOVIE.MOVIE_START1 IS '시작시간1';
COMMENT ON COLUMN BRANCH_MOVIE.MOVIE_START2 IS '시작시간2';
COMMENT ON COLUMN BRANCH_MOVIE.MOVIE_START3 IS '시작시간3';

ALTER TABLE BRANCH_MOVIE
  ADD
    CONSTRAINT PK_BRANCH_MOVIE
    PRIMARY KEY (
      MOVIE_NO
    );
    

/* 지점별 상영 관리 테이블 데이터 Insert */
INSERT INTO BRANCH_MOVIE(MOVIE_NO, BRANCH_NO, MOVIE_STARTDATE, MOVIE_ENDDATE, MOVIE_COUNT, MOVIE_START1, MOVIE_START2, MOVIE_START3)
VALUES(61, 1, TO_DATE('2018/05/15 15:09:05','yyyy/mm.dd hh24:mi:ss'), TO_DATE('2018/05/19 15:09:00', 'yyyy/mm.dd hh24:mi:ss'), 1,'08:00','16:00','18:00');

INSERT INTO BRANCH_MOVIE 
VALUES(62, 2, TO_DATE('2018/05/15 15:09:16','yyyy/mm.dd hh24:mi:ss'), TO_DATE('2018/05/15 15:09:16', 'yyyy/mm.dd hh24:mi:ss'), 2,'08:00','16:00','18:00');

INSERT INTO BRANCH_MOVIE 
VALUES(63, 3, TO_DATE('2018/05/15 00:00:00','yyyy/mm.dd hh24:mi:ss'), TO_DATE('2018/05/18 00:00:00', 'yyyy/mm.dd hh24:mi:ss'), 3,'10:00','15:00','18:00');

select * from BRANCH_MOVIE;


/* 지점 테이블 생성*/
CREATE TABLE BRANCH (
  BRANCH_NO NUMBER(10) NOT NULL, /* 지점번호 */
  BRANCH_NAME VARCHAR2(30), /* 지점명 */
  BRANCH_CAPACITY NUMBER(10) /* 정원 */
);

COMMENT ON TABLE BRANCH IS '지점';

COMMENT ON COLUMN BRANCH.BRANCH_NO IS '지점번호';

COMMENT ON COLUMN BRANCH.BRANCH_NAME IS '지점명';

COMMENT ON COLUMN BRANCH.BRANCH_CAPACITY IS '정원';

ALTER TABLE BRANCH
  ADD
    CONSTRAINT PK_BRANCH
    PRIMARY KEY (
      BRANCH_NO
    );
    
INSERT INTO BRANCH VALUES(1, '서울', 50);
INSERT INTO BRANCH VALUES(2, '인천', 40);
INSERT INTO BRANCH VALUES(3, '부산', 30);

select * from branch;
/* 직책 테이블 생성*/
CREATE TABLE JOB (
  JOB_NO NUMBER(10) NOT NULL, /* 직책번호 */
  JOB_NAME VARCHAR2(20) /* 직책명 */
);

COMMENT ON TABLE JOB IS '직책';

COMMENT ON COLUMN JOB.JOB_NO IS '직책번호';

COMMENT ON COLUMN JOB.JOB_NAME IS '직책명';

ALTER TABLE JOB
  ADD
    CONSTRAINT PK_JOB
    PRIMARY KEY (
      JOB_NO
    );
    
/* 직책 테이블 데이터 넣기*/
Insert into job values (1,'사장');
Insert into job values (2,'지점관리자');

/* 비식별, FK 규정*/
ALTER TABLE JOB
  ADD
    CONSTRAINT PK_JOB
    PRIMARY KEY (
      JOB_NO
    );

ALTER TABLE EMP_INFO
  ADD
    CONSTRAINT FK_BRANCH_TO_EMP_INFO
    FOREIGN KEY (
      BRANCH_NO
    )
    REFERENCES BRANCH (
      BRANCH_NO
    );

ALTER TABLE TICKET_PAY
  ADD
    CONSTRAINT FK_USER_INFO_TO_TICKET_PAY
    FOREIGN KEY (
      USER_NO
    )
    REFERENCES USER_INFO (
      USER_NO
    );

ALTER TABLE TICKET_PAY
  ADD
    CONSTRAINT FK_MOVIE_INFO_TO_TICKET_PAY
    FOREIGN KEY (
      MOVIE_NO
    )
    REFERENCES MOVIE_INFO (
      MOVIE_NO
    );

ALTER TABLE TICKET_PAY
  ADD
    CONSTRAINT FK_BRANCH_TO_TICKET_PAY
    FOREIGN KEY (
      BRANCH_NO
    )
    REFERENCES BRANCH (
      BRANCH_NO
    );

ALTER TABLE EMP_TIMEMANAGE
  ADD
    CONSTRAINT FK_EMP_INFO_TO_EMP_TIMEMANAGE
    FOREIGN KEY (
      EMP_NO
    )
    REFERENCES EMP_INFO (
      EMP_NO
    );

ALTER TABLE USER_MILEAGE
  ADD
    CONSTRAINT FK_USER_INFO_TO_USER_MILEAGE
    FOREIGN KEY (
      USER_NO
    )
    REFERENCES USER_INFO (
      USER_NO
    );

ALTER TABLE BRANCH_MOVIE
  ADD
    CONSTRAINT FK_MOVIE_INFO_TO_BRANCH_MOVIE
    FOREIGN KEY (
      MOVIE_NO
    )
    REFERENCES MOVIE_INFO (
      MOVIE_NO
    );
    commit;
    select * from user_INFO;
    